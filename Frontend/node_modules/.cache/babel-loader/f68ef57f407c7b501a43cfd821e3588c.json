{"ast":null,"code":"import User from './user';\nimport { users, problems } from \"../globals\";\nimport Problem from \"../problem/Problem\";\nimport API from '../Api/index';\n\nfunction resolve(x) {\n  return new Promise(func => {\n    setTimeout(() => {\n      func(x);\n    }, 1);\n  });\n}\n\nfunction reject(error) {\n  return new Promise((resolve, func) => {\n    setTimeout(() => {\n      func(error);\n    }, 1);\n  });\n}\n\nconst userService = {\n  async login(login, password) {\n    // const user = await API.get()\n    if (!users.has(login)) {\n      return reject('Нет таких зарегистрированных пользователей');\n    } else {\n      if (users.get(login).password !== password) {\n        return reject('Неверный пароль');\n      } else {\n        users.get(login).isLogged = true;\n        return resolve({\n          user: users.get(login)\n        });\n      }\n    }\n  },\n\n  async logout(login) {\n    users.get(login).isLogged = false;\n    return resolve({\n      user: null\n    });\n  },\n\n  async register(login, password) {\n    console.log(login);\n    console.log(password);\n    const response = await API.post('/signup', {\n      'username': login,\n      'password': password\n    });\n    console.log(response);\n\n    if (response === false) {\n      return reject('Такой пользователь уже существует');\n    } else {\n      users.set(login, new User(login, password, true));\n      return resolve({\n        user: users.get(login)\n      });\n    }\n  },\n\n  async editProblem(problem) {\n    problems.get(problem.id).name = problem.name;\n    problems.get(problem.id).task = problem.task;\n    problems.get(problem.id).solution = problem.solution;\n    problems.get(problem.id).author = problem.author;\n    return resolve({\n      problem: problems.get(problem.id)\n    });\n  },\n\n  async addProblem(problem) {\n    problem.id = problems.size;\n    problems.set(problem.id, new Problem(problem.name, problem.task, problem.solution, problem.author, problem.user, problem.id));\n    return resolve({\n      problem: problems.get(problem.id)\n    });\n  },\n\n  async init() {\n    return resolve(problems);\n  }\n\n};\nexport default userService;","map":{"version":3,"sources":["/home/daniil/WebstormProjects/untitled1/src/User/index.js"],"names":["User","users","problems","Problem","API","resolve","x","Promise","func","setTimeout","reject","error","userService","login","password","has","get","isLogged","user","logout","register","console","log","response","post","set","editProblem","problem","id","name","task","solution","author","addProblem","size","init"],"mappings":"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","sourcesContent":["import User from './user'\nimport {users, problems} from \"../globals\";\nimport Problem from \"../problem/Problem\";\nimport API from '../Api/index'\n\nfunction resolve(x) {\n    return new Promise(func => {\n        setTimeout(() => {\n            func(x);\n        }, 1);\n    });\n}\n\nfunction reject(error) {\n    return new Promise((resolve, func) => {\n        setTimeout(() => {\n            func(error);\n        }, 1);\n    });\n}\n\nconst userService = {\n    async login(login, password) {\n        // const user = await API.get()\n        if (!users.has(login)) {\n            return reject('Нет таких зарегистрированных пользователей');\n        } else {\n            if (users.get(login).password !== password) {\n                return reject('Неверный пароль');\n            } else {\n                users.get(login).isLogged = true;\n                return resolve({user: users.get(login)});\n            }\n        }\n    },\n\n    async logout(login) {\n        users.get(login).isLogged = false;\n        return resolve({user: null});\n    },\n\n    async register(login, password) {\n        console.log(login)\n        console.log(password)\n        const response = await API.post('/signup',{'username': login, 'password': password})\n        console.log(response)\n        if (response === false) {\n            return reject('Такой пользователь уже существует')\n        } else {\n            users.set(login, new User(login, password, true))\n            return resolve({user: users.get(login)});\n        }\n    },\n\n    async editProblem(problem) {\n        problems.get(problem.id).name = problem.name;\n        problems.get(problem.id).task = problem.task;\n        problems.get(problem.id).solution = problem.solution;\n        problems.get(problem.id).author = problem.author;\n        return resolve({problem: problems.get(problem.id)})\n    },\n\n    async addProblem(problem) {\n        problem.id = problems.size\n        problems.set(problem.id, new Problem(problem.name,problem.task,problem.solution,problem.author,problem.user,problem.id))\n        return resolve({problem: problems.get(problem.id)})\n    },\n\n    async init() {\n        return resolve(problems)\n    }\n\n}\n\nexport default userService"]},"metadata":{},"sourceType":"module"}
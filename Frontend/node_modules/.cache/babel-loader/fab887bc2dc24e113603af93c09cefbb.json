{"ast":null,"code":"import userService from \"../User\";\nexport function fetchIsLogged(user) {\n  return {\n    type: 'USER_ISLOGGED',\n    user\n  };\n}\nexport function fetchInitialize(data) {\n  return {\n    type: 'INITIALIZE',\n    data\n  };\n}\nexport function fetchIsNotLogged() {\n  return {\n    type: 'USER_ISUNLOGGED'\n  };\n}\nexport function fetchFailedToLogin(error) {\n  return {\n    type: 'FAILED-TOLOGIN',\n    error\n  };\n}\nexport function fetchEditProblem(problems) {\n  return {\n    type: 'EDIT-PROBLEM'\n  };\n}\nexport function toLogin(login, password) {\n  return dispatch => {\n    return userService.login(login, password).then(data => {\n      console.log(data, 'toLogin');\n      dispatch(fetchIsLogged(data));\n    }).catch(error => {\n      console.log('error!!!!!', error);\n      dispatch(fetchFailedToLogin(error));\n      throw Error(error);\n    });\n  };\n}\nexport function toRegister(login, password) {\n  return dispatch => {\n    return userService.register(login, password).then(data => {\n      console.log(data, 'toRegister');\n      dispatch(fetchIsLogged(data));\n    }).catch(error => {\n      console.log('error!!!!!', error);\n      dispatch(fetchFailedToLogin(error));\n      throw Error(error);\n    });\n  };\n}\nexport function toLogout(login) {\n  return dispatch => {\n    return userService.logout(login).then(data => {\n      console.log(data, 'toLogout ');\n      dispatch(fetchIsNotLogged());\n    });\n  };\n}\nexport function editProblem(problem) {\n  return dispatch => {\n    return userService.editProblem(problem);\n  };\n}\nexport function addProblem(problem) {\n  return dispatch => {\n    return userService.addProblem(problem);\n  };\n}\nexport function toInit() {\n  return dispatch => {\n    return userService.init().then(data => {\n      dispatch(fetchInitialize(data));\n    });\n  };\n}","map":{"version":3,"sources":["/home/daniil/WebstormProjects/untitled1/src/action/index.js"],"names":["userService","fetchIsLogged","user","type","fetchInitialize","data","fetchIsNotLogged","fetchFailedToLogin","error","fetchEditProblem","problems","toLogin","login","password","dispatch","then","console","log","catch","Error","toRegister","register","toLogout","logout","editProblem","problem","addProblem","toInit","init"],"mappings":"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","sourcesContent":["import userService from \"../User\";\n\nexport function fetchIsLogged(user) {\n    return {\n        type: 'USER_ISLOGGED',\n        user\n    }\n}\n export function fetchInitialize(data) {\n    return {\n        type: 'INITIALIZE',\n        data\n    }\n }\n\nexport function fetchIsNotLogged() {\n    return {\n        type: 'USER_ISUNLOGGED',\n    }\n}\n\nexport function fetchFailedToLogin(error) {\n    return {\n        type: 'FAILED-TOLOGIN',\n        error\n    }\n}\n\nexport function fetchEditProblem(problems) {\n    return {\n        type: 'EDIT-PROBLEM',\n\n    }\n}\n\nexport function toLogin(login, password) {\n    return dispatch => {\n        return userService.login(login, password).then((data) => {\n            console.log(data, 'toLogin');\n            dispatch(fetchIsLogged(data));\n        }).catch((error) => {\n            console.log('error!!!!!', error)\n            dispatch(fetchFailedToLogin(error))\n            throw Error(error)\n        });\n    }\n}\n\nexport function toRegister(login, password) {\n    return dispatch => {\n        return userService.register(login, password).then((data) => {\n            console.log(data, 'toRegister');\n            dispatch(fetchIsLogged(data));\n        }).catch((error) => {\n            console.log('error!!!!!', error)\n            dispatch(fetchFailedToLogin(error))\n            throw Error(error)\n        });\n    }\n}\n\nexport function toLogout(login) {\n    return dispatch => {\n        return userService.logout(login).then((data) => {\n            console.log(data, 'toLogout ');\n            dispatch(fetchIsNotLogged());\n        })\n    }\n}\n\nexport function editProblem(problem) {\n    return dispatch => {\n        return userService.editProblem(problem)\n\n    }\n}\n\nexport function addProblem(problem) {\n    return dispatch => {\n        return userService.addProblem(problem)\n\n    }\n}\n\nexport function toInit() {\n    return dispatch => {\n        return userService.init().then((data) => {\n            dispatch(fetchInitialize(data));\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}
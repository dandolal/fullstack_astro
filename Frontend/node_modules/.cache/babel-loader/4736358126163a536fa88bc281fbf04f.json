{"ast":null,"code":"import User from './user';\nimport { users, problems } from \"../globals\";\nimport Problem from \"../problem/Problem\";\nimport API from '../Api/index';\n\nfunction resolve(x) {\n  return new Promise(func => {\n    setTimeout(() => {\n      func(x);\n    }, 1);\n  });\n}\n\nfunction reject(error) {\n  return new Promise((resolve, func) => {\n    setTimeout(() => {\n      func(error);\n    }, 1);\n  });\n}\n\nconst userService = {\n  async login(login, password) {\n    let response = await API.get('/login', {\n      params: {\n        'username': login,\n        'password': password\n      }\n    });\n    console.log(response);\n\n    if (!users.has(login)) {\n      return reject('Нет таких зарегистрированных пользователей');\n    } else {\n      if (users.get(login).password !== password) {\n        return reject('Неверный пароль');\n      } else {\n        users.get(login).isLogged = true;\n        return resolve({\n          user: users.get(login)\n        });\n      }\n    }\n  },\n\n  async logout(login) {\n    users.get(login).isLogged = false;\n    return resolve({\n      user: null\n    });\n  },\n\n  async register(login, password) {\n    console.log(login);\n    console.log(password);\n    const response = await API.post('/signup', {\n      'username': login,\n      'password': password\n    });\n    console.log(response);\n\n    if (response.data === false) {\n      return reject('Такой пользователь уже существует');\n    } else {\n      users.set(login, new User(login, password, true));\n      return resolve({\n        user: users.get(login)\n      });\n    }\n  },\n\n  async editProblem(problem, user) {\n    const username = user.login;\n    const password = user.password;\n    const token = Buffer.from(`${username}:${password}`, 'utf8').toString('base64');\n    const data = {\n      'title': problem.name,\n      'statement': problem.task,\n      'solution': problem.solution,\n      'author': problem.author,\n      'username': user.login,\n      'id': problem.id\n    };\n    await API.post('/problem', data, {\n      headers: {\n        'Authorization': `Basic ${token}`\n      }\n    });\n    return resolve({\n      problem: problems.get(problem.id)\n    });\n  },\n\n  async addProblem(problem, user) {\n    const username = user.login;\n    const password = user.password;\n    const token = Buffer.from(`${username}:${password}`, 'utf8').toString('base64');\n    const data = {\n      'title': problem.name,\n      'statement': problem.task,\n      'solution': problem.solution,\n      'author': problem.author,\n      'username': user.login\n    };\n    await API.post('/problem', data, {\n      headers: {\n        'Authorization': `Basic ${token}`\n      }\n    });\n    return resolve({\n      problem: problems.get(problem.id)\n    });\n  },\n\n  async init() {\n    let problems_list_back = await API.get('/problem/all');\n    console.log('I am here');\n    console.log(problems_list_back.data);\n    let problems_list = new Map();\n    problems_list_back.data.forEach(function (problem) {\n      problems_list.set(problem.id, new Problem(problem.title, problem.statement, problem.solution, problem.author, problem.username, problem.id));\n    });\n    return resolve(problems_list);\n  }\n\n};\nexport default userService;","map":{"version":3,"sources":["/home/daniil/WebstormProjects/untitled1/src/User/index.js"],"names":["User","users","problems","Problem","API","resolve","x","Promise","func","setTimeout","reject","error","userService","login","password","response","get","params","console","log","has","isLogged","user","logout","register","post","data","set","editProblem","problem","username","token","Buffer","from","toString","name","task","solution","author","id","headers","addProblem","init","problems_list_back","problems_list","Map","forEach","title","statement"],"mappings":"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","sourcesContent":["import User from './user'\nimport {users, problems} from \"../globals\";\nimport Problem from \"../problem/Problem\";\nimport API from '../Api/index'\n\nfunction resolve(x) {\n    return new Promise(func => {\n        setTimeout(() => {\n            func(x);\n        }, 1);\n    });\n}\n\nfunction reject(error) {\n    return new Promise((resolve, func) => {\n        setTimeout(() => {\n            func(error);\n        }, 1);\n    });\n}\n\nconst userService = {\n    async login(login, password) {\n        let response = await API.get('/login', {params: {'username': login, 'password': password}})\n        console.log(response)\n        if (!users.has(login)) {\n            return reject('Нет таких зарегистрированных пользователей');\n        } else {\n            if (users.get(login).password !== password) {\n                return reject('Неверный пароль');\n            } else {\n                users.get(login).isLogged = true;\n                return resolve({user: users.get(login)});\n            }\n        }\n    },\n\n    async logout(login) {\n        users.get(login).isLogged = false;\n        return resolve({user: null});\n    },\n\n    async register(login, password) {\n        console.log(login)\n        console.log(password)\n        const response = await API.post('/signup', {'username': login, 'password': password})\n        console.log(response)\n        if (response.data === false) {\n            return reject('Такой пользователь уже существует')\n        } else {\n            users.set(login, new User(login, password, true))\n            return resolve({user: users.get(login)});\n        }\n    },\n\n    async editProblem(problem, user) {\n        const username = user.login\n        const password = user.password\n        const token = Buffer.from(`${username}:${password}`, 'utf8').toString('base64')\n        const data = {\n            'title': problem.name,\n            'statement': problem.task,\n            'solution': problem.solution,\n            'author': problem.author,\n            'username': user.login,\n            'id': problem.id\n        }\n        await API.post('/problem', data, {headers: {'Authorization': `Basic ${token}`}})\n        return resolve({problem: problems.get(problem.id)})\n    },\n\n    async addProblem(problem, user) {\n        const username = user.login\n        const password = user.password\n        const token = Buffer.from(`${username}:${password}`, 'utf8').toString('base64')\n        const data = {\n            'title': problem.name,\n            'statement': problem.task,\n            'solution': problem.solution,\n            'author': problem.author,\n            'username': user.login\n        }\n        await API.post('/problem', data, {headers: {'Authorization': `Basic ${token}`}})\n        return resolve({problem: problems.get(problem.id)})\n    },\n\n    async init() {\n        let problems_list_back = await API.get('/problem/all')\n        console.log('I am here')\n        console.log(problems_list_back.data)\n        let problems_list = new Map()\n        problems_list_back.data.forEach(function (problem) {\n            problems_list.set(problem.id,\n                new Problem(problem.title, problem.statement, problem.solution, problem.author, problem.username, problem.id)\n            )\n        })\n        return resolve(problems_list)\n    }\n\n}\n\nexport default userService"]},"metadata":{},"sourceType":"module"}